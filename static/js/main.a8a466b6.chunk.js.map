{"version":3,"sources":["components/header-box/header-box.component.jsx","components/outward-journey-box/outward-journey-box.component.jsx","components/return-journey-box/return-journey-box.component.jsx","App-direct.js","serviceWorker.js","index.js"],"names":["HeaderBox","className","type","placeholder","OutwardBox","method","class","ReturnBox","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SA0BeA,G,gBAtBG,kBAChB,6BACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,gBAAd,gBAEF,yBAAKA,UAAU,cACb,0BAAMA,UAAU,eACd,2BACEC,KAAK,MACLD,UAAU,kBACVE,YAAY,WAEd,2BACED,KAAK,MACLD,UAAU,kBACVE,YAAY,cCoBPC,G,MAnCI,kBACjB,yBAAKH,UAAU,2BACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,SAAd,oBAEF,0BAAMI,OAAO,OACX,2BACEH,KAAK,OACLD,UAAU,0BACVE,YAAY,mBAEd,yBAAKF,UAAU,YACb,yBAAKA,UAAU,eACb,uBAAGK,MAAM,oBACT,2BAAOL,UAAU,eAAeE,YAAY,iBAC5C,uBAAGG,MAAM,oBACT,2BAAOJ,KAAK,OAAOD,UAAU,cAAcE,YAAY,OACvD,uBAAGG,MAAM,oBACT,2BAAOJ,KAAK,OAAOD,UAAU,cAAcE,YAAY,SAG3D,yBAAKF,UAAU,mBACb,yBAAKA,UAAU,oBACb,2BAAOC,KAAK,QAAQD,UAAU,aAC9B,2BAAOA,UAAU,UAAjB,YAEF,yBAAKA,UAAU,oBACb,2BAAOC,KAAK,QAAQD,UAAU,aAC9B,0BAAMA,UAAU,UAAhB,iBCKKM,G,MAjCG,kBAChB,yBAAKN,UAAU,0BACb,yBAAKA,UAAU,eACb,wBAAIA,UAAU,SAAd,mBAEF,yBAAKA,UAAU,yBACb,2BACEC,KAAK,WACLD,UAAU,WACVE,YAAY,gBAEd,2BAAOF,UAAU,UAAjB,gBAEF,8BACE,2BACEC,KAAK,OACLD,UAAU,0BACVE,YAAY,mBAEd,yBAAKF,UAAU,YACb,yBAAKA,UAAU,eACb,uBAAGK,MAAM,oBACT,2BAAOL,UAAU,eAAeE,YAAY,iBAC5C,uBAAGG,MAAM,oBACT,2BAAOJ,KAAK,OAAOD,UAAU,cAAcE,YAAY,OACvD,uBAAGG,MAAM,oBACT,2BAAOJ,KAAK,OAAOD,UAAU,cAAcE,YAAY,aCblDK,EAVH,WACV,OACE,yBAAKP,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a8a466b6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './header-box.styles.scss';\n\nconst HeaderBox = () => (\n  <div>\n    <div className=\"header\">\n      <h2 className=\"header-title\">Buy Tickets</h2>\n    </div>\n    <div className=\"header-box\">\n      <form className=\"header-form\">\n        <input\n          type=\"geo\"\n          className=\"input-container\"\n          placeholder=\"From *\"\n        ></input>\n        <input\n          type=\"geo\"\n          className=\"input-container\"\n          placeholder=\"To *\"\n        ></input>\n      </form>\n    </div>\n  </div>\n);\n\nexport default HeaderBox;\n\n","import React from 'react';\n\nimport './outward-journey-box.styles.scss';\n\nconst OutwardBox = () => (\n  <div className=\"outward-journey-section\">\n    <div className=\"mid-section\">\n      <h2 className=\"title\">Outward journey</h2>\n    </div>\n    <form method='get'>\n      <input\n        type=\"text\"\n        className=\"input-container-outward\"\n        placeholder=\"11 March, 2020\"\n      ></input>\n      <div className=\"fieldset\">\n        <div className=\"input-icons\">\n          <i class=\"fa fa-sort icon\"></i>\n          <input className=\"depart-input\" placeholder=\"Depart After\"></input>\n          <i class=\"fa fa-sort icon\"></i>\n          <input type=\"text\" className=\"clock-input\" placeholder=\"17\"></input>\n          <i class=\"fa fa-sort icon\"></i>\n          <input type=\"text\" className=\"clock-input\" placeholder=\"00\"></input>\n        </div>\n      </div>\n      <div className=\"return-checkbox\">\n        <div className=\"one-way-checkbox\">\n          <input type=\"radio\" className=\"checkbox\"></input>\n          <label className=\"labels\">One way</label>\n        </div>\n        <div className=\"one-way-checkbox\">\n          <input type=\"radio\" className=\"checkbox\"></input>\n          <labe className=\"labels\"> Return</labe>\n        </div>\n      </div>\n    </form>\n  </div>\n);\n\nexport default OutwardBox;\n\n\n;","import React from 'react';\n\nimport './return-journey-box.styles.scss'\n\nconst ReturnBox = () => (\n  <div className=\"return-journey-section\">\n    <div className=\"mid-section\">\n      <h2 className=\"title\">Return journey</h2>\n    </div>\n    <div className=\"open-return-container\">\n      <input\n        type=\"checkbox\"\n        className=\"checkbox\"\n        placeholder=\"Open return\"\n      ></input>\n      <label className=\"labels\">Open return</label>\n    </div>\n    <form>\n      <input\n        type=\"text\"\n        className=\"input-container-outward\"\n        placeholder=\"11 March, 2020\"\n      ></input>\n      <div className=\"fieldset\">\n        <div className=\"input-icons\">\n          <i class=\"fa fa-sort icon\"></i>\n          <input className=\"depart-input\" placeholder=\"Depart After\"></input>\n          <i class=\"fa fa-sort icon\"></i>\n          <input type=\"text\" className=\"clock-input\" placeholder=\"17\"></input>\n          <i class=\"fa fa-sort icon\"></i>\n          <input type=\"text\" className=\"clock-input\" placeholder=\"00\"></input>\n        </div>\n      </div>\n    </form>\n  </div>\n);\n\nexport default ReturnBox;\n\n\n    ","import React from 'react';\nimport './App.scss';\n\nimport HeaderBox from './components/header-box/header-box.component';\nimport OutwardBox from './components/outward-journey-box/outward-journey-box.component';\nimport ReturnBox from './components/return-journey-box/return-journey-box.component';\n\nconst App = () => {\n  return (\n    <div className='big-box'>\n        <HeaderBox />\n        <OutwardBox />\n        <ReturnBox />        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App-direct';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}